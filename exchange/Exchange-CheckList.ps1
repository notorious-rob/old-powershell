####################################################################################################
# Generated On: Monday, November 07, 2011 4:07:15 PM
# Generated By: Milind Naphade
# Disclaimer: Author holds no responsibility to damages caused due to incorrect use of this script.
#			  It is recommended that you run this script in  your lab before using in production.
####################################################################################################

param(
	[string] $ServerName,
	[string] $Path = "",
	[string] $CompanyName = "",
	[string] $SMTPServer = "",
	[string] $From = "",
	[string] $To = "",
	[array]  $JournalMailbox = ""

)

####################################################################################################
# This function validates the scripts parameters
function ValidateParams
{
  $validInputs = $true
  $errorString =  ""

  if ($ServerName -eq "")
  {
    $validInputs = $false
    $errorString += "`nMissing parameter: The -ServerName parameter is mandetory."
  }

  if ($Path -eq "")
  {
    $validInputs = $false
    $errorString += "`nMissing parameter: The -Path parameter is mandetory."
  }

  if ($CompanyName -eq "")
  {
    $validInputs = $false
    $errorString += "`nMissing parameter: The -CompanyName parameter is mandetory."
  }

  if ($SMTPServer -eq "")
  {
    $validInputs = $false
    $errorString += "`nMissing parameter: The -SMTPServer parameter is mandetory."
  }

  if ($From -eq "")
  {
    $validInputs = $false
    $errorString += "`nMissing parameter: The -From parameter is mandetory."
  }

  if ($To -eq "")
  {
    $validInputs = $false
    $errorString += "`nMissing parameter: The -To parameter is mandetory."
  }

  if (!$validInputs)
  {
    Write-error "$errorString"
  }

  return $validInputs
}

####################################################################################################
# Function that returns true if the incoming argument is a help request
#
function IsHelpRequest
{
	param($argument)
	return ($argument -eq "-?" -or $argument -eq "-help");
}

# Function that displays the help related to this script following
# the same format provided by get-help or <cmdletcall> -?
function Usage
{
@"

NAME:
`tChecklist.ps1

SYNOPSIS:
`t Script: Checklist.PS1 to create a health check report from Exchange servers
`t         Get: service status / message queue / database status / backup status

SYNTAX:
`tChecklist.ps1
`t`t[-ServerName <ServerIdParameter>]
`t`t[-Path <Path>]
`t`t[-CompanyName <Client Supported>]
`t`t[-SMTPServer <IP SMTPServer>]
`t`t[-From <E-mail From>]
`t`t[-To <E-mail To>]
`t`t[-JournalMailbox <Identity>]

PARAMETERS:
`t-ServerName (mandetory)
`t`tMust be an Exchange 2010 server. This script should be run locally on the mentioned server.

`t-Path (mandetory)
`t`tThis is the folder identity where the generated report will be saved.

`t-CompanyName (mandetory)
`t`tName of your company E.g. "Contoso Inc."

`t-SMTPServer (mandetory)
`t`tHub Transport Server name or IP address. Any SMTP relay that can accept the email will also work.

`t-From (mandetory)
`t`tSender's email address.

`t-To (mandetory)
`t`tList of recipient(s). You can pass a comma seperated values here.
`t`tFor more than one recipients use {user1@domain.com, user2@domain.com}

`t-JournalMailbox (optional)
`t`tThe mailbox identity to get mailbox statistics.
`t`tFor many mailboxes use {user1@domain.com},{user2@domain.com} or user1@domain.com,user2@domain.com


`t-------------------------- EXAMPLE 1 --------------------------

C:\PS> .\Exchange-CheckList.ps1 -ServerName "EXCH-01" -Path "c:\Checklists\" -CompanyName "Your Company Name" -SMTPServer "192.168.75.128" -From "checklist@domain.com" -To {manager@domain.com,support@domain.com} -JournalMailbox {journal@domain.com}

"@
}

####################################################################################################
# Function to send e-mails using the incoming arguments
#
function sendEmail {

$EmailBody = Get-Content $Args[0]

#* Create new .NET object and assign to variable
$Email = New-Object System.Net.Mail.MailMessage

#* Sender Address
$Email.From = New-Object System.Net.Mail.MailAddress($Args[2]);

#* Recipient Address
$Email.To.Add($Args[3]);

#* Message Subject
$Email.Subject = $Args[1];

#* Message Body
$Email.Body = $EmailBody;

$Email.IsBodyHtml = $True;

#$Email.Attachments.Add("XXX");

#* Connect to your mail server
$smtp = New-Object System.Net.Mail.SmtpClient($Args[4]);

#* Uncomment line below if alternate credentials are required to be supplied.
# $smtp.Credentials = New-Object System.Net.NetworkCredential("Domain\UserName", "Password");

$smtp.UseDefaultCredentials = $true

#* Send Email
$smtp.Send($Email);

}

####################################################################################################
# Function to format value
#
function Func_EdbFilesize {"{0:00.00}" -f ((Get-ChildItem($Args[0])).Length/1GB)}

####################################################################################################
# Function to get value
#
function Func_Message { ($Args[0].Split("."))[0] }

####################################################################################################
# Function to write volume information in HTML table
#
function Func_HtmlVolumeT {
$str34 = [char]34
@("
		<TR>
			<td width=30% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $args[0] + @("</font></B></TD>
			<td width=20% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $args[1] + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $args[2] + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $args[3] + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $args[4] + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $args[5] + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $args[6] + @("</font></B></TD>
		</TR>
")
}


####################################################################################################
# Script starts here
####################################################################################################
#Add-PSSnapin Microsoft.Exchange.Management.PowerShell.Admin

# Check for Usage Statement Request
$Args | foreach { if (IsHelpRequest $_) { Usage; exit; } }

# Validate the parameters
$ifValidParams = ValidateParams;

if (!$ifValidParams) { exit; }

$Date   = Get-Date -UFormat "%Y%m%d"
$Month  = Get-Date -UFormat "%Y%m"
$Hour   = Get-Date -UFormat "%H%M"

$FolderToWrite = $Path + $Month + "\"
$File          = $ServerName  + "-" + $Date
$FileToWrite   = $FolderToWrite + $File + "-" + $Hour + ".html"


write-host $FileToWrite

$ExistFolder = Test-Path $FolderToWrite

if ($ExistFolder -eq $False) {New-Item -path $Path -name $Month -type directory}

# Write HTML header to output file
$str34 = [char]34
$HtmlHeader = @("
<!DOCTYPE HTML Public $str34 -//W3C//DTD HTML 4.0 Transitional//EN $str34 >
<HTML xmlns:mso= $str34 urn:schemas-microsoft-com:office:office $str34 xmlns:msdt= $str34 uuid:C2F41010-65B3-11d1-A29F-00AA00C14882 $str34 ><HEAD><TITLE></TITLE>
<META http-equiv=Content-Type content= $str34 text/html; charset=iso-8859-1 $str34 >
<META content= $str34 MSHTML 6.00.2900.3132 $str34 name=GENERATOR>
<!--[if gte mso 9]><xml>
<mso:CustomDocumentProperties>
<mso:Cliente msdt:dt= $str34 string $str34> $CompanyName </mso:Cliente>
<mso:Tipo_x0020_de_x0020_correio msdt:dt= $str34 string $str34 >Microsoft Exchange 2000</mso:Tipo_x0020_de_x0020_correio>
<mso:ContentType msdt:dt= $Str34 string $Str34 >Document</mso:ContentType>
<mso:Servers msdt:dt= $Str34 string $Str34 > $ServerName </mso:Servers>
<mso:Document_x0020_Type msdt:dt= $Str34 string $Str34 >Health-Check</mso:Document_x0020_Type>
</mso:CustomDocumentProperties>
</xml><![endif]-->
</HEAD>
<BODY>
" )

Add-Content $FileToWrite -value $HtmlHeader

# Write Exchange server information to output file
$ExchangeServer = Get-ExchangeServer -Identity $ServerName -Status | select-object Identity, IsHubTransportServer, IsClientAccessServer, IsEdgeServer, IsMailboxServer, ServerRole,IsMemberOfCluster

$ExchangeVer = "Exchange 2010"

$HtmlServer = @("
	<table width=100% >
		<tr>
			<td bgcolor=Blue>
			<font FACE=@Arial Unicode MS size= 5 color=White>$CompanyName</font>
			</td>
		</tr>
	</table>

	<table width=100% border=0>
		<TR>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><B>Exchange Server</B></font></TD>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><B>Version</B></font></TD>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><B>Server Role</B></font></TD>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><B>IsMemberOfCluster</B></font></TD>
		</TR>
		<TR>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $ServerName + @("</font></B></TD>
                        <td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $ExchangeVer + @("</font></B></TD>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $ExchangeServer.ServerRole + @("</font></B></TD>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $ExchangeServer.IsMemberOfCluster + @("</font></B></TD>
		</TR>
	</table>

	<table width=100% border=0>
		<TR>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><B>IsMailboxServer</B></font></TD>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><B>IsHubTransportServer</B></font></TD>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><B>IsClientAccessServer</B></font></TD>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><B>IsEdgeServer</B></font></TD>
		</TR>
		<TR>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $ExchangeServer.IsMailboxServer + @("</font></B></TD>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $ExchangeServer.IsHubTransportServer + @("</font></B></TD>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $ExchangeServer.IsClientAccessServer + @("</font></B></TD>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $ExchangeServer.IsEdgeServer + @("</font></B></TD>
		</TR>
	</table>

" )

Add-Content $FileToWrite -value $HtmlServer


# Write Exchange CMS information to output file
if ($ExchangeServer.IsMemberOfCluster -eq "Yes") {

$Cluster = Get-clusteredmailboxserverstatus  -Identity $ServerName | select-object Identity,State,@{Name="OperationalMachines";Expression={$_.OperationalMachines}},@{Name="FailedResources";Expression={$_.FailedResources}}

$ColorFont1 = "#0066B3"
$ColorFont2 = "#0000FF"

if ($Cluster.State -ne "Online") {$ColorFont1 = "#FF6600"}
if ($Cluster.OperationalMachines.Length -lt 4) {$ColorFont2 = "#FF6600"}

$Cluster.OperationalMachines = ($Cluster.OperationalMachines -replace("<","(")) -replace(">",")")
$Cluster.FailedResources = ($Cluster.FailedResources -replace("<","(")) -replace(">",")")

$HtmlCluster = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Clustered Mailbox Server Status</font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=60% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Exchange Server</b></font></TD>
			<td width=40% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>State</b></font></TD>
		</TR>
		<TR>
			<td width=60% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $Cluster.Identity + @("</font></B></TD>
			<td width=40% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $Cluster.State + @("</font></B></TD>
		</TR>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=100% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Operational Machines</b></font></TD>
		</TR>
		<TR>
			<td width=100% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont2><B>") + [String] $Cluster.OperationalMachines + @("</font></B></TD>
		</TR>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=100% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Failed Resources</b></font></TD>
		</TR>
		<TR>
			<td width=100% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + [String] $Cluster.FailedResources + @("</font></B></TD>
		</TR>
	</table>
")

Add-Content $FileToWrite -value $HtmlCluster

}

$HtmlEndTable = @("	</table>")

# Write volume disk information to output file
$Volume = Get-WmiObject -Class Win32_Volume -Filter "DriveType=3" | Sort-Object Name,Label | select-object Name, Label, DriveLetter,@{Name="Capacity";Expression={[math]::round($_.Capacity/1GB,2)}},@{Name="SpaceRequired";Expression={[math]::round($_.Capacity*0.25/1GB,2)}},@{Name="SpaceInUse";Expression={[math]::round(([INT64]$_.Capacity-[INT64]$_.FreeSpace)/1GB,2)}},@{Name="FreeSpace";Expression={[math]::round($_.FreeSpace/1GB,2)}}

$HtmlVolume = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Disk Volumes (GB)</font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=35% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Name</b></font></TD>
			<td width=20% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Label</b></font></TD>
			<td width=10% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Drive Letter</b></font></TD>
			<td width=10% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Capacity</b></font></TD>
			<td width=10% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Space Required</b></font></TD>
			<td width=10% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Space InUse</b></font></TD>
			<td width=10% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>FreeSpace</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlVolume

foreach ($Vol in $Volume) {

$ColorFont1 = "#FF6600"

if ($Vol.SpaceRequired -lt $Vol.FreeSpace) {$ColorFont1 =  "#0000FF"}

$HtmlVolumeT = @("
		<TR>
			<td width=30% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $Vol.Name + @("</font></B></TD>
			<td width=20% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $Vol.Label + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $Vol.DriveLetter + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $Vol.Capacity + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $Vol.SpaceRequired + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $Vol.SpaceInUse + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000.00}" -f $Vol.FreeSpace + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlVolumeT
}

Add-Content $FileToWrite -value $HtmlEndTable

# Write Exchange server health service information to output file
$ServiceS = Test-ServiceHealth | Select-Object Role,RequiredServicesRunning,@{Name="ServicesRunning";Expression={$_.ServicesRunning}}, @{Name="ServicesNotRunning";Expression={$_.ServicesNotRunning}}

$HtmlServices = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Service Health</font></b></td>
		</tr>
	</table>
")

Add-Content $FileToWrite -value $HtmlServices

foreach ($Service in $Services) {

$ColorFont1 = "#0000FF"

if ($Service.RequiredServicesRunning -ne $True) {$ColorFont1 = "#FF6600"}

$HtmlServicesT = @("
	<table width=100% border=0>
		<TR>
			<td width=60% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Server Role</b></font></TD>
			<td width=40% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Required Services Running</b></font></TD>
		</TR>
		<TR>
			<td width=60% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $Service.Role + @("</font></B></TD>
			<td width=40% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $Service.RequiredServicesRunning + @("</font></B></TD>
		</TR>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=100% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Services Running</b></font></TD>
		</TR>
		<TR>
			<td width=100% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $Service.ServicesRunning + @("</font></B></TD>
		</TR>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=100% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Services Services Not Running</b></font></TD>
		</TR>
		<TR>
			<td width=100% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $Service.ServicesNotRunning + @("</font></B></TD>
		</TR>
	</table>
")

Add-Content $FileToWrite -value $HtmlServicesT
}

# Write Exchange server mailbox information to output file
if ($ExchangeServer.IsMailboxServer -eq $True) {

$MailboxDatabases = Get-MailboxDatabase -Server $ServerName -Status | Select-Object Identity, EdbFilePath, Mounted,@{Name="Size";Expression={Func_EdbFilesize($_.EdbFilePath)}},LastFullBackup

$HtmlMailboxDatabase = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Mailbox Databases</font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Database</b></font></TD>
			<td width=35% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>EdbFilePath</b></font></TD>
			<td width=15% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Size</b></font></TD>
			<td width=15% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>LastFullBackup</b></font></TD>
			<td width=10% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Mounted</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlMailboxDatabase

foreach ($MailboxDatabase in $MailboxDatabases) {

$ColorFont1 = "#0000FF"
$ColorFont2 = "#0000FF"


if ($MailboxDatabase.LastFullBackup -lt ((get-date).addHours(-24))) {$ColorFont1 = "#FF6600"}
if ($MailboxDatabase.Mounted -eq $False) {$ColorFont2 = "#FF6600"}

$HtmlMailboxDatabaseT = @("
		<TR>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $MailboxDatabase.Identity + @("</font></B></TD>
			<td width=35% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $MailboxDatabase.EdbFilePath + @("</font></B></TD>
			<td width=15% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $MailboxDatabase.Size + @("</font></B></TD>
			<td width=15% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $MailboxDatabase.LastFullBackup + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont2><B>") + $MailboxDatabase.Mounted + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlMailboxDatabaseT
}

Add-Content $FileToWrite -value $HtmlEndTable


$PublicFolderDatabases = Get-PublicFolderDatabase -Server $ServerName -Status | Select-Object Identity, EdbFilePath, Mounted,@{Name="Size";Expression={Func_EdbFilesize($_.EdbFilePath)}}, LastFullBackup

$HtmlPublicFolderDatabase = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> PublicFolder Databases</font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Database</b></font></TD>
			<td width=35% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>EdbFilePath</b></font></TD>
			<td width=15% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Size</b></font></TD>
			<td width=15% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>LastFullBackup</b></font></TD>
			<td width=10% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Mounted</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlPublicFolderDatabase

foreach ($PublicFolderDatabase in $PublicFolderDatabases) {

$ColorFont1 = "#0000FF"
$ColorFont2 = "#0000FF"


if ($PublicFolderDatabase.LastFullBackup -lt ((get-date).addHours(-24))) {$ColorFont1 = "#FF6600"}
if ($PublicFolderDatabase.Mounted -eq $False) {$ColorFont2 = "#FF6600"}

$HtmlPublicFolderDatabaseT = @("
		<TR>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $PublicFolderDatabase.Identity + @("</font></B></TD>
			<td width=35% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $PublicFolderDatabase.EdbFilePath + @("</font></B></TD>
			<td width=15% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $PublicFolderDatabase.Size + @("</font></B></TD>
			<td width=15% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $PublicFolderDatabase.LastFullBackup + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont2><B>") + $PublicFolderDatabase.Mounted + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlPublicFolderDatabaseT
}

Add-Content $FileToWrite -value $HtmlEndTable

$EventLogs = Get-EventLog -LogName application | where {(($_.EventId -eq 210) -or ($_.EventId -eq 213)) -and $_.TimeGenerated -gt ((get-date).addHours(-24)) } | sort Message, EventID | select-object EventID,TimeGenerated,@{Name="Message";Expression={Func_Message($_.Message)}}

$HtmlEventLog = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Backup EventLogs </font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=15% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>EventID</b></font></TD>
			<td width=15% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Time Generated</b></font></TD>
			<td width=70% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Message</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlEventLog

foreach ($EventLog in $EventLogs) {

$ColorFont1 = "#0000FF"
$ColorFont2 = "#0000FF"

$HtmlEventLogT = @("
		<TR>
			<td width=15% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $EventLog.EventID + @("</font></B></TD>
			<td width=15% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $EventLog.TimeGenerated + @("</font></B></TD>
			<td width=70% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont2><B>") + $EventLog.Message + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlEventLogT
}

Add-Content $FileToWrite -value $HtmlEndTable

$MAPIConnectivity = Test-MAPIConnectivity -Server $ServerName | Where-Object {[String]$_.Result -ne "Success"} | Select-Object Server,Database,@{Name="Result";Expression={[String]$_.Result}}

$HtmlMAPIConnectivity = @("

	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Test-MAPIConnectivity</font></b></td>
		</tr>
	</table>
")

Add-Content $FileToWrite -value $HtmlMAPIConnectivity

if (!$MAPIConnectivity) {

$HtmlMAPIConnectivityT = @("

	<table width=100% border=0>
		<TR>
			<td width=60% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2 COLOR= #0000FF><b>Result: Success</b></font></TD>
		</TR>
	</table>
")

Add-Content $FileToWrite -value $HtmlMAPIConnectivityT

} else {

$HtmlMAPIConnectivityT = @("

	<table width=100% border=0>
		<TR>
			<td width=60% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2 COLOR=#FF6600><b>Result: *FAILURE*</b></font></TD>
		</TR>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Server</b></font></TD>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Database</b></font></TD>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Database</b></font></TD>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Result</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlMAPIConnectivityT

foreach ($MAPIFailure in $MAPIConnectivity) {

$HtmlMAPIConnectivityT2 = @("
		<TR>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $MAPIFailure.Server + @("</font></B></TD>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $MAPIFailure.MailboxDatabase + @("</font></B></TD>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $MAPIFailure.Database + @("</font></B></TD>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $MAPIFailure.Result + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlMAPIConnectivityT2
}
Add-Content $FileToWrite -value $HtmlEndTable
}

$Mailflow = Test-Mailflow | Select-Object TestMailflowResult,MessageLatencyTime

$HtmlMailflow = @("

	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Test-Mailflow</font></b></td>
		</tr>
	</table>
")

Add-Content $FileToWrite -value $HtmlMailflow

$ColorFont1 = "#0000FF"

if ($Mailflow.TestMailflowResult -eq $False) {$ColorFont1 = "#FF6600"}

$HtmlMailflowT = @("

	<table width=100% border=0>
		<TR>
			<td width=60% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><b>Result: Success</b></font></TD>
		</TR>
	</table>
")

Add-Content $FileToWrite -value $HtmlMailflowT

Add-Content $FileToWrite -value $HtmlEndTable

}

# Write Mailbox Journaling statistics to output file
if ($JournalMailbox -ne "") {

$HtmlJournal = @("

	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Archiving Information</font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=30% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2>DisplayName</font></TD>
			<td width=15% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2>ServerName</font></TD>
			<td width=20% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2>Database</font></TD>
			<td width=10% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2>ItemCount</font></TD>
			<td width=10% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2>TotalItemSize (GB)</font></TD>
			<td width=15% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2>LastLogonTime</font></TD>
		</TR>

")

Add-Content $FileToWrite -value $HtmlJournal

foreach ($Mailbox in $JournalMailbox) {

$MailboxT = [string] $Mailbox

$JournalMbxT = Get-Mailbox -Identity $MailboxT | Get-MailboxStatistics | select-object DisplayName, ServerName, Database, ItemCount, @{Name="TotalItemSize";Expression={[math]::round(($_.TotalItemSize/1GB),2)}}, LastLogonTime

foreach ($JournalMbx in $JournalMbxT) {

$ColorFont1 = "#0000FF"

if ($JournalMbx.ItemCount -gt 30000) {$ColorFont1 = "#FF6600"}

$HtmlJournalT = @("
		<TR>
			<td width=30% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $JournalMbx.DisplayName + @("</font></B></TD>
			<td width=15% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $JournalMbx.ServerName + @("</font></B></TD>
			<td width=20% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $JournalMbx.Database + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $JournalMbx.ItemCount + @("</font></B></TD>
			<td width=10% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + "{0:000}" -f $JournalMbx.TotalItemSize + @("</font></B></TD>
			<td width=15% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $JournalMbx.LastLogonTime + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlJournalT
}
}
Add-Content $FileToWrite -value $HtmlEndTable

}


# Write Exchange server HUB information to output file
if ($ExchangeServer.IsHubTransportServer -eq $True) {

$Queues = Get-Queue -server $ServerName | Select-Object Identity,DeliveryType,Status,MessageCount,NextHopDomain

$HtmlQueues = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Queue Status</font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=25% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Queue</b></font></TD>
			<td width=20% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Delivery Type</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Status</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Message Count</b></font></TD>
			<td width=39% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Net Hop Domain</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlQueues

foreach ($Queue in $Queues) {

$ColorFont1 = "#0000FF"

if ($Queues.MessageCount -gt 200) {$ColorFont1 = "#FF6600"}

$HtmlQueuesT = @("
		<TR>
			<td width=25% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $Queue.Identity + @("</font></B></TD>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $Queue.DeliveryType + @("</font></B></TD>
			<td width=7% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $Queue.Status + @("</font></B></TD>
			<td width=7% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $Queue.MessageCount + @("</font></B></TD>
			<td width=39% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $Queue.NextHopDomain + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlQueuesT
}

Add-Content $FileToWrite -value $HtmlEndTable

}

# Write Exchange server CAS information to output file
if ($ExchangeServer.IsClientAccessServer -eq $True) {

$OwaConnectivity = Test-OwaConnectivity -TestType:internal | Select-Object ClientAccessServer,MailboxServer,Url,@{Name="Result";Expression={[String]$_.Result}},EventType

$HtmlOwaConnectivity = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Test-OwaConnectivity</font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=22% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Client Access Server</b></font></TD>
			<td width=22% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Mailbox Server</b></font></TD>
			<td width=40% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Url</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Logon Result</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Event Type</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlOwaConnectivity

foreach ($OwaConn in $OwaConnectivity) {

$ColorFont1 = "#0000FF"

if (($OwaConn.Result -ne "Success") -or ($OwaConn.EventType -ne "Success")) {$ColorFont1 = "#FF6600"}

$HtmlOwaConnectivityT = @("
		<TR>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $OwaConn.ClientAccessServer + @("</font></B></TD>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $OwaConn.MailboxServer + @("</font></B></TD>
			<td width=40% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $OwaConn.Url + @("</font></B></TD>
			<td width=8% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $OwaConn.Result + @("</font></B></TD>
			<td width=8% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $OwaConn.EventType + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlOwaConnectivityT
}

Add-Content $FileToWrite -value $HtmlEndTable

$PopConnectivity = Test-PopConnectivity | Select-Object ClientAccessServer,Scenario,@{Name="Result";Expression={[String]$_.Result}},MailboxServer,EventType

$HtmlPopConnectivity = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b>Test-PopConnectivity</font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=22% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Client Access Server</b></font></TD>
			<td width=22% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Mailbox Server</b></font></TD>
			<td width=40% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Scenario</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Result</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Event Type</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlPopConnectivity

foreach ($PopConn in $PopConnectivity) {

$ColorFont1 = "#0000FF"

if (($PopConn.Result -ne "Success") -or ($PopConn.EventType -ne "Success")) {$ColorFont1 = "#FF6600"}

$HtmlPopConnectivityT = @("
		<TR>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $PopConn.ClientAccessServer + @("</font></B></TD>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $PopConn.MailboxServer + @("</font></B></TD>
			<td width=40% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $PopConn.Scenario + @("</font></B></TD>
			<td width=8% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $PopConn.Result + @("</font></B></TD>
			<td width=8% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $PopConn.EventType + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlPopConnectivityT
}

Add-Content $FileToWrite -value $HtmlEndTable

$ImapConnectivity = Test-ImapConnectivity | Select-Object ClientAccessServer,Scenario,@{Name="Result";Expression={[String]$_.Result}},MailboxServer,EventType

$HtmlImapConnectivity = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Test-ImapConnectivity</font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=22% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Client Access Server</b></font></TD>
			<td width=22% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Mailbox Server</b></font></TD>
			<td width=40% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Scenario</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Result</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Event Type</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlImapConnectivity

foreach ($ImapConn in $ImapConnectivity) {

$ColorFont1 = "#0000FF"

if (($ImapConn.Result -ne "Success") -or ($ImapConn.EventType -ne "Success")) {$ColorFont1 = "#FF6600"}

$HtmlImapConnectivityT = @("
		<TR>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $ImapConn.ClientAccessServer + @("</font></B></TD>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $ImapConn.MailboxServer + @("</font></B></TD>
			<td width=40% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $ImapConn.Scenario + @("</font></B></TD>
			<td width=8% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $ImapConn.Result + @("</font></B></TD>
			<td width=8% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $ImapConn.EventType + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlImapConnectivityT
}

Add-Content $FileToWrite -value $HtmlEndTable

$WebServicesConnectivity = Test-WebServicesConnectivity -TrustAnySSLCertificate | Where-Object {[String]$_.Result -ne "Success"} | Select-Object ClientAccessServer,Scenario,MailboxServer,@{Name="Result";Expression={[String]$_.Result}},EventType

$HtmlWebServicesConnectivity = @("

	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Test-WebServicesConnectivity (Outlook AnyWhere)</font></b></td>
		</tr>
	</table>
")

Add-Content $FileToWrite -value $HtmlWebServicesConnectivity

if (!$WebServicesConnectivity) {

$HtmlWebServicesConnectivityT = @("

	<table width=100% border=0>
		<TR>
			<td width=60% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2 COLOR= #0000FF><b>Result: Success</b></font></TD>
		</TR>
	</table>
")

Add-Content $FileToWrite -value $HtmlWebServicesConnectivityT

} else {

$HtmlWebServicesConnectivityT = @("

	<table width=100% border=0>
		<TR>
			<td width=60% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2 COLOR=#FF6600><b>Result: *FAILURE*</b></font></TD>
		</TR>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=22% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Client Access Server</b></font></TD>
			<td width=22% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Mailbox Server</b></font></TD>
			<td width=40% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Scenario</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Result</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Event Type</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlWebServicesConnectivityT

foreach ($WebServicesFailure in $WebServicesConnectivity) {

$HtmlWebServicesConnectivityT2 = @("
		<TR>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $WebServicesFailure.ClientAccessServer + @("</font></B></TD>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $WebServicesFailure.MailboxServer + @("</font></B></TD>
			<td width=40% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $WebServicesFailure.Scenario + @("</font></B></TD>
			<td width=8% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $WebServicesFailure.Result + @("</font></B></TD>
			<td width=8% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $WebServicesFailure.EventType + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlWebServicesConnectivityT2
}
Add-Content $FileToWrite -value $HtmlEndTable
}

$ActiveSyncConnectivity = Test-ActiveSyncConnectivity -TrustAnySSLCertificate | Where-Object {[String]$_.Result -ne "Success"} | Select-Object ClientAccessServer,Scenario,MailboxServer,@{Name="Result";Expression={[String]$_.Result}},EventType

$HtmlActiveSyncConnectivity = @("

	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b> Test-ActiveSyncConnectivity</font></b></td>
		</tr>
	</table>
")

Add-Content $FileToWrite -value $HtmlActiveSyncConnectivity

if (!$ActiveSyncConnectivity) {

$HtmlActiveSyncConnectivityT = @("

	<table width=100% border=0>
		<TR>
			<td width=60% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2 COLOR= #0000FF><b>Result: Success</b></font></TD>
		</TR>
	</table>
")

Add-Content $FileToWrite -value $HtmlActiveSyncConnectivityT

} else {

$HtmlActiveSyncConnectivityT = @("

	<table width=100% border=0>
		<TR>
			<td width=60% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2 COLOR=#FF6600><b>Result: *FAILURE*</b></font></TD>
		</TR>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=22% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Client Access Server</b></font></TD>
			<td width=22% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Mailbox Server</b></font></TD>
			<td width=40% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Scenario</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Result</b></font></TD>
			<td width=8% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Event Type</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlActiveSyncConnectivityT

foreach ($ActiveSyncFailure in $ActiveSyncConnectivity) {

$HtmlActiveSyncConnectivityT2 = @("
		<TR>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $ActiveSyncFailure.ClientAccessServer + @("</font></B></TD>
			<td width=22% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $ActiveSyncFailure.MailboxServer + @("</font></B></TD>
			<td width=40% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $ActiveSyncFailure.Scenario + @("</font></B></TD>
			<td width=8% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $ActiveSyncFailure.Result + @("</font></B></TD>
			<td width=8% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR=#FF6600><B>") + $ActiveSyncFailure.EventType + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlActiveSyncConnectivityT2
}
Add-Content $FileToWrite -value $HtmlEndTable
}

}


# Write Exchange server HUB or CAS certificate information to output file
if (($ExchangeServer.IsHubTransportServer -eq $True) -or ($ExchangeServer.IsClientAccessServer -eq $True)) {

$Certificates = Get-ExchangeCertificate | Select-Object @{Name="CertificateDomains";Expression={$_.CertificateDomains}},Services,NotAfter,Status

$HtmlCertificate = @("
	<table width=100% border=0>
		<tr>
			<td><font FACE=@Arial Unicode MS size=4> <b>Exchange Certificates</font></b></td>
		</tr>
	</table>
	<table width=100% border=0>
		<TR>
			<td width=40% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>CertificateDomains</b></font></TD>
			<td width=30% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Services</b></font></TD>
			<td width=15% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>NotAfter</b></font></TD>
			<td width=15% bgcolor=d9d9df><font FACE=@Arial Unicode MS size=2><b>Status</b></font></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlCertificate

foreach ($Certificate in $Certificates) {

$ColorFont1 = "#0000FF"
$ColorFont2 = "#0000FF"

if ($Certificate.NotAfter -lt ((get-date).addDays(30))) {$ColorFont1 = "#FF6600"}
if ($Certificate.Status -eq $False) {$ColorFont2 = "#FF6600"}

$HtmlCertificateT = @("
		<TR>
			<td width=40% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $Certificate.CertificateDomains + @("</font></B></TD>
			<td width=30% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= #0000FF><B>") + $Certificate.Services + @("</font></B></TD>
			<td width=15% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont1><B>") + $Certificate.NotAfter + @("</font></B></TD>
			<td width=15% bgcolor=e6e6fa><FONT FACE=@Arial Unicode MS size=2 COLOR= $ColorFont2><B>") + $Certificate.Status + @("</font></B></TD>
		</TR>
")

Add-Content $FileToWrite -value $HtmlCertificateT
}

Add-Content $FileToWrite -value $HtmlEndTable

}

# End Write to HTML file
$HtmlBorder = @("
</BODY>
</HTML>
")

Add-Content $FileToWrite -value $HtmlBorder

# submit e-mail 
sendEmail $FileToWrite $File $From $To $SMTPServer

# End Script
####################################################################################################


# SIG # Begin signature block
# MIID+QYJKoZIhvcNAQcCoIID6jCCA+YCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUJOOtCqxiEAQ+99xkYM8fWRkV
# QMGgggIWMIICEjCCAX+gAwIBAgIQRcV7Qu2E/7BNBeTrETNYADAJBgUrDgMCHQUA
# MBkxFzAVBgNVBAMTDk1pbGluZCBOYXBoYWRlMB4XDTExMTIwNzA3MzgyMFoXDTM5
# MTIzMTIzNTk1OVowGTEXMBUGA1UEAxMOTWlsaW5kIE5hcGhhZGUwgZ8wDQYJKoZI
# hvcNAQEBBQADgY0AMIGJAoGBAJAlsVfGkNyeT8jaSM2W8iJEEh20V1VFc2/rEKjm
# DN0Jc4kOqnYIJmyIXj/Uk2PWa5f2kXkobu8r+EFd5RU2iSuMv3l3UUivvYTFHtyV
# PQpw1AbFldCcoIGvnY9zvjXdPJk+ycPcTfPLDjVJsf6I7lw8OJFVi9xi1iZul5pE
# X4o7AgMBAAGjYzBhMBMGA1UdJQQMMAoGCCsGAQUFBwMDMEoGA1UdAQRDMEGAEH5L
# y7Yg6a9kpZ3clamKFOyhGzAZMRcwFQYDVQQDEw5NaWxpbmQgTmFwaGFkZYIQRcV7
# Qu2E/7BNBeTrETNYADAJBgUrDgMCHQUAA4GBAAjyrDB0h0m4VVJHnhLZHDmCTQBu
# jxkCMS5GRbACakv3fBgkYXsRkWrpWi/7xjSNucGTnNL06jyPidPdL8s2/PYckFXz
# G5Acoz7b420Km2m9UovYosPeAYQwZ/L32+Wf8O9H6JX3jGURacAlSY4MsAX/jktU
# yRiDrAcySVABTtHdMYIBTTCCAUkCAQEwLTAZMRcwFQYDVQQDEw5NaWxpbmQgTmFw
# aGFkZQIQRcV7Qu2E/7BNBeTrETNYADAJBgUrDgMCGgUAoHgwGAYKKwYBBAGCNwIB
# DDEKMAigAoAAoQKAADAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgorBgEE
# AYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAjBgkqhkiG9w0BCQQxFgQUozE5CF6NY8GW
# 4cHaLy7Ar10oGoIwDQYJKoZIhvcNAQEBBQAEgYBKKkKq4NVxfJ8LgL79A9A5wlv+
# JJKA0GzTB+DcukhBTlHnOwp+JWChVK23nkTg+qWQyLCU2KNZ0sG384eQq3piLfSI
# 1S89TbtxI5diqqdIw6A5I5MmcwaOlLvOX4aeObq/RSGbn/fYKw4Jt6BNZ+nK/T5+
# A+AnqW/Zk8TJyRmtog==
# SIG # End signature block
